Maven Basic

Maven Objective

--> Making build process easy
--> providing uniform build system
--> providing quality project info
--> allowing transparent migration to new release

Feature
1. Model based builds :  able to build any number of projects into predefined output types such as JAR ,WAR.
2. Release Management and Distribution Publication : can be integrate with source control system.
3. Dependency Management :-

artifactId :- is the name of the jar without version.
 			  If you created it, then you can choose whatever name you want with lowercase letters and no strange symbols. 
 			  If it's a third party jar, you have to take the name of the jar as it's distributed.
 			  
groupId :-   uniquely identifies your projects across all projects, so we need to enforce naming schema.
			 A groupId must follow java's package name rules.
			 A good name to determine granularity of groupId is to use project structure.
			 That if current project is a multiple module structure, it should appear a new identifier to the parent's groupId.
			 for Example: 
			 org.viral.JavaCore , org.viral.SpringProject , org.viral.StrutsProj
			 
Version :-   version if you distribute it, then you can choose any typical version with numbers and dots (1.0, 1.1, 1.0.1, ...). 
		     Don't use dates as they are usually associated with SNAPSHOT (nightly) builds. 
		     If it's a third party artifact, you have to use their version number whatever it is, and as strange as it can look.
		     
		    
		    
Maven Phases or Goals

1. validate - validate the project is correct and all necessary information is available
2. compile - compile the source code of the project
3. test - test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed
4. package - take the compiled code and package it in its distributable format, such as a JAR.
5. verify - run any checks on results of integration tests to ensure quality criteria are met
6. install - install the package into the local repository, for use as a dependency in other projects locally
7. deploy - done in the build environment, copies the final package to the remote repository for sharing with other developers and projects.
  
  
